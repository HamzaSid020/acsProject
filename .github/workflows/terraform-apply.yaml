name: Terraform Apply on Commit

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configure AWS credentials using GitHub Secrets
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
        env:
          ACTIONS_STEP_DEBUG: true

      # Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize and plan Terraform for Network Folder
      - name: Terraform Init in Network Folder
        working-directory: ./Network
        run: terraform init

      - name: Terraform Plan in Network Folder
        id: network_plan
        working-directory: ./Network
        run: terraform plan -out=tfplan_network

      # Initialize and plan Terraform for Webserver Folder
      - name: Terraform Init in Webserver Folder
        working-directory: ./Webserver
        run: terraform init

      - name: Terraform Plan in Webserver Folder
        id: webserver_plan
        working-directory: ./Webserver
        run: terraform plan -out=tfplan_webserver

      # Check if Network is deleting resources and apply Webserver resources first if so
      - name: Check Network Plan for Deletions
        id: check_deletion
        run: |
          # Ensure the tfplan file exists
          if [ ! -f ./Network/tfplan_network ]; then
            echo "Network plan file not found, skipping deletion check."
            exit 1
          fi

          # Check if there are destroy actions in the network plan
          terraform show -json ./Network/tfplan_network | jq '.resource_changes[] | select(.change.actions[] | any(startswith("destroy")))' > destroyed_network_resources.json
          if [[ -s destroyed_network_resources.json ]]; then
            echo "Network has resources to destroy, applying webserver resources first."
            echo "true" >> $GITHUB_ENV
          else
            echo "false" >> $GITHUB_ENV
          fi

      # Conditionally apply Webserver resources first if needed
      - name: Apply Webserver Resources (if needed)
        if: env.check_deletion == 'true'
        working-directory: ./Webserver
        run: terraform apply -auto-approve tfplan_webserver

      # Apply Network Resources (this will happen after Webserver if needed)
      - name: Apply Network Resources
        working-directory: ./Network
        run: terraform apply -auto-approve tfplan_network
